-- SQL commands for user management

-- Note: This schema is for a custom user management system using next-auth's CredentialsProvider.
-- It does NOT integrate with Supabase's built-in authentication.
-- As a result, Row Level Security (RLS) policies cannot rely on `auth.uid()`.
-- Authorization logic (e.g., ensuring users can only access their own data)
-- MUST be implemented within the Next.js API routes by validating the user's session token.

-- 1. Create the 'users' table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    email TEXT NOT NULL,
    password TEXT NOT NULL,
    name TEXT,
    role TEXT NOT NULL DEFAULT 'user',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

-- 2. Add comments for clarity
COMMENT ON TABLE public.users IS 'Stores user account information for custom authentication.';
COMMENT ON COLUMN public.users.email IS 'User''s unique email address.';
COMMENT ON COLUMN public.users.password IS 'Hashed password for the user.';
COMMENT ON COLUMN public.users.role IS 'User role for authorization (e.g., admin, user).';

-- 3. Enable Row Level Security (RLS)
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- 4. Create RLS policies
-- This policy allows public insert access for signup.
CREATE POLICY "Enable insert for anyone" ON public.users
  FOR INSERT
  WITH CHECK (true);

-- This policy allows read access to authenticated users.
-- Further restrictions should be applied in the API layer.
CREATE POLICY "Enable read access for authenticated users" ON public.users
  FOR SELECT
  USING (auth.role() = 'authenticated');

-- NOTE: Update and Delete policies are intentionally omitted for security.
-- These actions should be handled by specific, secure API endpoints
-- that validate the user's identity and permissions based on the session token.
